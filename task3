# Customer Churn Prediction 

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
url = "https://raw.githubusercontent.com/IBM/churn-visualization/master/data/WA_Fn-UseC_-Telco-Customer-Churn.csv"
data = pd.read_csv(url)
print("Dataset Shape:", data.shape)
print(data.head()
data = data.dropna()
label_encoders = {}
for column in data.select_dtypes(include=['object']).columns:
    le = LabelEncoder()
    data[column] = le.fit_transform(data[column])
    label_encoders[column] = l
X = data.drop("Churn", axis=1)
y = data["Churn"]
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42, stratify=y
)
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)
y_pred = model.predict(X_test)
print("\nâœ… Accuracy:", accuracy_score(y_test, y_pred))
print("\nðŸ“Š Classification Report:\n", classification_report(y_test, y_pred))
print("\nðŸ”Ž Confusion Matrix:\n", confusion_matrix(y_test, y_pred))
sample = X_test[0].reshape(1, -1)
prediction = model.predict(sample)[0]
print("\nCustomer Churn Prediction for sample row:", "Churn" if prediction == 1 else "Not Churn")
